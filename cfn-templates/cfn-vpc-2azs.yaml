---
AWSTemplateFormatVersion: "2010-09-09"
Description: "VPC: public and private subnets in 2 availability zones"

Parameters:
  EnvironmentName:
    Description: Name of the environment
    Type: String

  VpcCidr:
    Type: String
    Description: CIDR block for VPC
    Default: "10.20.0.0/16"
    AllowedPattern: "^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\/\\d{1,2}$"
    MinLength: 1

  SubnetPublicAz1Cidr:
    Type: String
    Description: "Public AZ subnet A IP range."
    AllowedPattern: "^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\/\\d{1,2}$"
    MinLength: 1
    Default: "10.20.0.0/20"

  SubnetPublicAz2Cidr:
    Type: String
    Description: "Public AZ subnet B IP range."
    AllowedPattern: "^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\/\\d{1,2}$"
    MinLength: 1
    Default: "10.20.32.0/20"

  SubnetPrivateAz1Cidr:
    Type: String
    Description: "Private AZ subnet  A IP range."
    AllowedPattern: "^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\/\\d{1,2}$"
    MinLength: 1
    Default: "10.20.16.0/20"

  SubnetPrivateAz2Cidr:
    Type: String
    Description: "Private AZ subnet B IP range."
    AllowedPattern: "^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\/\\d{1,2}$"
    MinLength: 1
    Default: "10.20.48.0/20"

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: "Name"
          Value: !Sub "${EnvironmentName}-VPC"

  InternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName}-igw"

  VPCGatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  SubnetAPublic:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: !Ref SubnetPublicAz1Cidr
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName}-Public-Subnet-A"
        - Key: Reach
          Value: public

  SubnetAPrivate:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: !Ref SubnetPrivateAz1Cidr
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName}-Private-Subnet-A"
        - Key: Reach
          Value: private

  SubnetBPublic:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select [1, !GetAZs ""]
      CidrBlock: !Ref SubnetPublicAz2Cidr
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName}-Public-Subnet-B"
        - Key: Reach
          Value: public

  SubnetBPrivate:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select [1, !GetAZs ""]
      CidrBlock: !Ref SubnetPrivateAz2Cidr
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName}-Public-Subnet-B"
        - Key: Reach
          Value: public

  RouteTableAPublic:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName} - Routing Table A Public"

  RouteTableBPublic:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName} - Routing Table B Public"

  RouteTableAPrivate:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName} - Routing Table A Private"

  RouteTableBPrivate:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName} - Routing Table B Private"

  RouteTableAssociationAPublic:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref SubnetAPublic
      RouteTableId: !Ref RouteTableAPublic

  RouteTableAssociationAPrivate:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref SubnetAPrivate
      RouteTableId: !Ref RouteTableAPrivate

  RouteTableAssociationBPublic:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref SubnetBPublic
      RouteTableId: !Ref RouteTableBPublic

  RouteTableAssociationBPrivate:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref SubnetBPrivate
      RouteTableId: !Ref RouteTableBPrivate

  RouteTablePublicInternetRoute:
    Type: "AWS::EC2::Route"
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref RouteTableAPublic
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway

  RouteTablePublicBInternetRoute:
    Type: "AWS::EC2::Route"
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref RouteTableBPublic
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway

  NetworkAclPublic:
    Type: "AWS::EC2::NetworkAcl"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName} - Public NACL"

  NetworkAclPrivate:
    Type: "AWS::EC2::NetworkAcl"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName} - Private NACL"

  SubnetNetworkAclAssociationAPublic:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      SubnetId: !Ref SubnetAPublic
      NetworkAclId: !Ref NetworkAclPublic

  SubnetNetworkAclAssociationAPrivate:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      SubnetId: !Ref SubnetAPrivate
      NetworkAclId: !Ref NetworkAclPrivate

  SubnetNetworkAclAssociationBPublic:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      SubnetId: !Ref SubnetBPublic
      NetworkAclId: !Ref NetworkAclPublic

  SubnetNetworkAclAssociationBPrivate:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      SubnetId: !Ref SubnetBPrivate
      NetworkAclId: !Ref NetworkAclPrivate

  NetworkAclEntryInPublicAllowAll:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId: !Ref NetworkAclPublic
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: "0.0.0.0/0"

  NetworkAclEntryOutPublicAllowAll:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId: !Ref NetworkAclPublic
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: "0.0.0.0/0"

  NetworkAclEntryInPrivateAllowVPC:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId: !Ref NetworkAclPrivate
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: "0.0.0.0/0"

  NetworkAclEntryOutPrivateAllowVPC:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId: !Ref NetworkAclPrivate
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: "0.0.0.0/0"

Outputs:
  TemplateID:
    Description: "Madstone Technology VPC CFN Template with 2 Availability Zones."
    Value: "vpc/vpc-2azs-v1"

  StackName:
    Description: "Stack name."
    Value: !Sub "${AWS::StackName}"

  AZs:
    Description: "AZs"
    Value: 2
    Export:
      Name: !Sub "${AWS::StackName}-AZs"

  AZA:
    Description: "AZ of A"
    Value: !Select [0, !GetAZs ""]
    Export:
      Name: !Sub "${AWS::StackName}-AZA"

  AZB:
    Description: "AZ of B"
    Value: !Select [1, !GetAZs ""]
    Export:
      Name: !Sub "${AWS::StackName}-AZB"

  CidrBlock:
    Description: "The set of IP addresses for the VPC."
    Value: !GetAtt "VPC.CidrBlock"
    Export:
      Name: !Sub "${AWS::StackName}-CidrBlock"

  VpcId:
    Description: "VPC."
    Value: !Ref VPC
    Export:
      Name: !Sub "${AWS::StackName}-VPC"

  SubnetsPublic:
    Description: "Subnets public."
    Value: !Join [",", [!Ref SubnetAPublic, !Ref SubnetBPublic]]
    Export:
      Name: !Sub "${AWS::StackName}-SubnetsPublic"

  SubnetsPrivate:
    Description: "Subnets private."
    Value: !Join [",", [!Ref SubnetAPrivate, !Ref SubnetBPrivate]]
    Export:
      Name: !Sub "${AWS::StackName}-SubnetsPrivate"

  RouteTablesPrivate:
    Description: "Route tables private."
    Value: !Join [",", [!Ref RouteTableAPrivate, !Ref RouteTableBPrivate]]
    Export:
      Name: !Sub "${AWS::StackName}-RouteTablesPrivate"

  RouteTablesPublic:
    Description: "Route tables public."
    Value: !Join [",", [!Ref RouteTableAPublic, !Ref RouteTableBPublic]]
    Export:
      Name: !Sub "${AWS::StackName}-RouteTablesPublic"

  SubnetAPublic:
    Description: "Subnet A public."
    Value: !Ref SubnetAPublic
    Export:
      Name: !Sub "${AWS::StackName}-SubnetAPublic"

  RouteTableAPublic:
    Description: "Route table A public."
    Value: !Ref RouteTableAPublic
    Export:
      Name: !Sub "${AWS::StackName}-RouteTableAPublic"

  SubnetAPrivate:
    Description: "Subnet A private."
    Value: !Ref SubnetAPrivate
    Export:
      Name: !Sub "${AWS::StackName}-SubnetAPrivate"

  RouteTableAPrivate:
    Description: "Route table A private."
    Value: !Ref RouteTableAPrivate
    Export:
      Name: !Sub "${AWS::StackName}-RouteTableAPrivate"

  SubnetBPublic:
    Description: "Subnet B public."
    Value: !Ref SubnetBPublic
    Export:
      Name: !Sub "${AWS::StackName}-SubnetBPublic"

  RouteTableBPublic:
    Description: "Route table B public."
    Value: !Ref RouteTableBPublic
    Export:
      Name: !Sub "${AWS::StackName}-RouteTableBPublic"

  SubnetBPrivate:
    Description: "Subnet B private."
    Value: !Ref SubnetBPrivate
    Export:
      Name: !Sub "${AWS::StackName}-SubnetBPrivate"

  RouteTableBPrivate:
    Description: "Route table B private."
    Value: !Ref RouteTableBPrivate
    Export:
      Name: !Sub "${AWS::StackName}-RouteTableBPrivate"
