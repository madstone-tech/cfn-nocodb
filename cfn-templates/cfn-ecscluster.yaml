---
AWSTemplateFormatVersion: "2010-09-09"

Description: >
  ECS Cluster and AutoScaling Group for BastionHost and EC2 Instances

Parameters:
  SSHKeyPair:
    Type: AWS::EC2::KeyPair::KeyName

  Subnets:
    Description: Subnets to attach to the load balancer
    Type: List<AWS::EC2::Subnet::Id>

  BastionHostSG:
    Description: "Security Group for Bastion Host"
    Type: AWS::EC2::SecurityGroup::Id

  InstanceProfile:
    Description: "Instance profile role for the BastionHost instance"
    Type: String
    Default: "NA"

  InstanceRole:
    Description: "Role name instance"
    Type: String
    MinLength: 1

  BastionHostInstanceType:
    Type: String
    Description: Bastion host instance type
    Default: t2.micro

  EnvironmentName:
    Type: String

  EFSId:
    Type: String
    Description: The Amazon EFS file system ID to use

  LatestAmiId:
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
    Default: "/aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id"

  RetentionDays:
    Type: Number
    Description: how many to keep logs in Cloudwatch
    Default: 7
    AllowedValues:
      - 1
      - 3
      - 5
      - 7
      - 14
      - 30
      - 60
      - 90
      - 120
      - 150
      - 180
      - 365
      - 400
      - 545
      - 731
      - 1827
      - 3653

  EcsCapacityProvider:
    Description: Optional select Spot Fargate Tasks for Development Environments
    Type: String
    Default: FARGATE_SPOT
    AllowedValues:
      - FARGATE_SPOT
      - FARGATE

Resources:
  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub ${EnvironmentName}
      ClusterSettings:
        - Name: containerInsights
          Value: enabled
      CapacityProviders:
        - !Ref EcsCapacityProvider
      DefaultCapacityProviderStrategy:
        - CapacityProvider: !Ref EcsCapacityProvider
          Weight: 1

  ContainerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/ecs/${Cluster}-${AWS::StackName}"
      RetentionInDays: !Ref RetentionDays

  BastionHostAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      DesiredCapacity: "1"
      MinSize: "1"
      MaxSize: "2"
      VPCZoneIdentifier:
        - !Select [0, !Ref Subnets]
        - !Select [1, !Ref Subnets]
      MixedInstancesPolicy:
        InstancesDistribution:
          SpotAllocationStrategy: capacity-optimized
        LaunchTemplate:
          LaunchTemplateSpecification:
            LaunchTemplateId: !Ref BastionHostLaunchTemplate
            Version: !GetAtt BastionHostLaunchTemplate.LatestVersionNumber
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-BastionHostAG
          PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: 1
        MaxBatchSize: 1
        PauseTime: PT15M
        WaitOnResourceSignals: true

  BastionHostLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Metadata:
      AWS::CloudFormation::Authentication:
        S3AccessCreds:
          type: "S3"
          buckets:
            - "aws-quickstart"
          roleName:
            Ref: InstanceRole
      AWS::CloudFormation::Init:
        configSets:
          default:
            - "awslogs"
            - "config"
            - "mountfs"
        awslogs:
          packages:
            yum:
              awslogs: []
          files:
            "/etc/awslogs/awscli.conf":
              content: !Sub |
                [default]
                region = ${AWS::Region}
                [plugins]
                cwlogs = cwlogs
              mode: "000644"
              owner: root
              group: root
            "/etc/awslogs/awslogs.conf":
              content: !Sub |
                [general]
                state_file = /var/lib/awslogs/agent-state
                [/var/log/amazon/ssm/amazon-ssm-agent.log]
                datetime_format = %Y-%m-%d %H:%M:%S
                file = /var/log/amazon/ssm/amazon-ssm-agent.log
                log_stream_name = {instance_id}/var/log/amazon/ssm/amazon-ssm-agent.log
                log_group_name = ${ContainerLogGroup}
                [/var/log/amazon/ssm/errors.log]
                datetime_format = %Y-%m-%d %H:%M:%S
                file = /var/log/amazon/ssm/errors.log
                log_stream_name = {instance_id}/var/log/amazon/ssm/errors.log
                log_group_name = ${ContainerLogGroup}
                [/var/log/audit/audit.log]
                file = /var/log/audit/audit.log
                log_stream_name = {instance_id}/var/log/audit/audit.log
                log_group_name = ${ContainerLogGroup}
                [/var/log/awslogs.log]
                datetime_format = %Y-%m-%d %H:%M:%S
                file = /var/log/awslogs.log
                log_stream_name = {instance_id}/var/log/awslogs.log
                log_group_name = ${ContainerLogGroup}
                [/var/log/boot.log]
                file = /var/log/boot.log
                log_stream_name = {instance_id}/var/log/boot.log
                log_group_name = ${ContainerLogGroup}
                [/var/log/cfn-hup.log]
                datetime_format = %Y-%m-%d %H:%M:%S
                file = /var/log/cfn-hup.log
                log_stream_name = {instance_id}/var/log/cfn-hup.log
                log_group_name = ${ContainerLogGroup}
                [/var/log/cfn-init-cmd.log]
                datetime_format = %Y-%m-%d %H:%M:%S
                file = /var/log/cfn-init-cmd.log
                log_stream_name = {instance_id}/var/log/cfn-init-cmd.log
                log_group_name = ${ContainerLogGroup}
                [/var/log/cfn-init.log]
                datetime_format = %Y-%m-%d %H:%M:%S
                file = /var/log/cfn-init.log
                log_stream_name = {instance_id}/var/log/cfn-init.log
                log_group_name = ${ContainerLogGroup}
                [/var/log/cfn-wire.log]
                datetime_format = %Y-%m-%d %H:%M:%S
                file = /var/log/cfn-wire.log
                log_stream_name = {instance_id}/var/log/cfn-wire.log
                log_group_name = ${ContainerLogGroup}
                [/var/log/cloud-init-output.log]
                file = /var/log/cloud-init-output.log
                log_stream_name = {instance_id}/var/log/cloud-init-output.log
                log_group_name = ${ContainerLogGroup}
                [/var/log/cloud-init.log]
                datetime_format = %b %d %H:%M:%S
                file = /var/log/cloud-init.log
                log_stream_name = {instance_id}/var/log/cloud-init.log
                log_group_name = ${ContainerLogGroup}
                [/var/log/cron]
                datetime_format = %b %d %H:%M:%S
                file = /var/log/cron
                log_stream_name = {instance_id}/var/log/cron
                log_group_name = ${ContainerLogGroup}
                [/var/log/dmesg]
                file = /var/log/dmesg
                log_stream_name = {instance_id}/var/log/dmesg
                log_group_name = ${ContainerLogGroup}
                [/var/log/grubby_prune_debug]
                file = /var/log/grubby_prune_debug
                log_stream_name = {instance_id}/var/log/grubby_prune_debug
                log_group_name = ${ContainerLogGroup}
                [/var/log/maillog]
                datetime_format = %b %d %H:%M:%S
                file = /var/log/maillog
                log_stream_name = {instance_id}/var/log/maillog
                log_group_name = ${ContainerLogGroup}
                [/var/log/messages]
                datetime_format = %b %d %H:%M:%S
                file = /var/log/messages
                log_stream_name = {instance_id}/var/log/messages
                log_group_name = ${ContainerLogGroup}
                [/var/log/secure]
                datetime_format = %b %d %H:%M:%S
                file = /var/log/secure
                log_stream_name = {instance_id}/var/log/secure
                log_group_name = ${ContainerLogGroup}
                [/var/log/yum.log]
                datetime_format = %b %d %H:%M:%S
                file = /var/log/yum.log
                log_stream_name = {instance_id}/var/log/yum.log
                log_group_name = ${ContainerLogGroup}
              mode: "000644"
              owner: root
              group: root
            "/etc/awslogs/config/ecs.conf":
              content: !Sub |
                [/var/log/ecs/ecs-init.log]
                file = /var/log/ecs/ecs-init.log
                log_stream_name = {instance_id}/var/log/ecs/ecs-init.log
                log_group_name = ${ContainerLogGroup}
                datetime_format = %Y-%m-%dT%H:%M:%SZ
                [/var/log/ecs/ecs-agent.log]
                file = /var/log/ecs/ecs-agent.log.*
                log_stream_name = {instance_id}/var/log/ecs/ecs-agent.log
                log_group_name = ${ContainerLogGroup}
                datetime_format = %Y-%m-%dT%H:%M:%SZ
              mode: "000644"
              owner: root
              group: root
          services:
            sysvinit:
              awslogsd:
                enabled: true
                ensureRunning: true
                packages:
                  yum:
                    - awslogs
                files:
                  - "/etc/awslogs/awslogs.conf"
                  - "/etc/awslogs/awscli.conf"
                  - "/etc/awslogs/config/ecs.conf"
        config:
          files:
            /etc/cfn/cfn-hup.conf:
              mode: 000400
              owner: root
              group: root
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.BastionHostLaunchTemplate.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource BastionHostLaunchTemplate
                runas=root
          packages:
            yum:
              amazon-efs-utils: []
              python3-pip: []
              git: []
          commands:
            00-set-region:
              command: !Sub aws configure set default.region ${AWS::Region}
            10-install-jq:
              command: yum install -y jq
          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
        mountfs:
          files:
            /etc/systemd/system/mnt-efs.mount:
              content: !Sub |
                [Unit]
                Description = Mount EFS Share
                Wants=network.target
                After=syslog.target network-online.target
                [Mount]
                What=${EFSId}:/
                Where=/mnt/efs
                Type=efs
                Options=defaults
                [Install]
                WantedBy=multi-user.target
          commands:
            00-enable-systemd.mount:
              command: systemctl enable mnt-efs.mount

    Properties:
      LaunchTemplateData:
        IamInstanceProfile:
          Name: !Ref InstanceProfile
        ImageId: !Ref LatestAmiId
        InstanceInitiatedShutdownBehavior: terminate
        InstanceType: !Ref BastionHostInstanceType
        KeyName: !Ref SSHKeyPair
        Monitoring:
          Enabled: true
        SecurityGroupIds:
          - !Ref BastionHostSG
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            yum install -y aws-cfn-bootstrap
            /opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource BastionHostLaunchTemplate 
            echo "before-cfn-signal - $(date)" >> /root/init.log
            mkdir /mnt/efs
            echo "mounting EFS - $(date)" >> /root/init.log
            systemctl enable mnt-efs.mount
            systemctl start mnt-efs.mount
            echo "mounted ${EFSId} EFS - $(date)" >> /root/init.log
            /opt/aws/bin/cfn-signal -e 0 --region ${AWS::Region} --stack ${AWS::StackName} --resource BastionHostAutoScalingGroup
            echo "after-cfn-signal - $(date)" >> /root/init.log
            pip3 install ansible

Outputs:
  Cluster:
    Description: "ECS Cluster name"
    Value: !Ref Cluster

  LogGroupName:
    Description: "LogGroup Name"
    Value: !Ref ContainerLogGroup
